version: 2
jobs:
  latest: &template
    docker:
      - image: circleci/node:10

    steps:
      # Checkout the build from Git.
      - checkout

      # Restore any cached node_modules from the last
      # build, if package.json has the same checksum.
      - restore_cache:
          key: dependencies-{{ checksum "package.json" }}'

      # Install dependencies.
      - run:
          name: Install dependencies
          command: npm install --silent

      # Save the content of node_modules to cache for the next build.
      - save_cache:
          key: dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

      # Run the tests configured in package.json.
      - run:
          command: npm test -- --ci --reporters=jest-junit --runInBand --coverage && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/results.xml
            COVERALLS_PARALLEL: true

      # Run linting.
      - run:
          name: Linting
          command: npm run lint -- --format junit -o test-results/eslint/results.xml

      # Store test and lint results
      - store_test_results:
          path: test-results

  "node-10":
    <<: *template
    docker:
      - image: circleci/node:10

  "node-9":
    <<: *template
    docker:
      - image: circleci/node:9

  "node-8":
    <<: *template
    docker:
      - image: circleci/node:8

  "node-7":
    <<: *template
    docker:
      - image: circleci/node:7

  "node-6":
    <<: *template
    docker:
      - image: circleci/node:6

  "node-4":
    <<: *template
    docker:
      - image: circleci/node:4

workflows:
  version: 2
  build_and_test:
    jobs:
      - "latest"
      - "node-10"
      - "node-9"
      - "node-8"
      - "node-7"
      - "node-6"
      - "node-4"
